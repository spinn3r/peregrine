#!/bin/sh

BRANCH=burton-bench
DIR=/root/peregrine
LOGDIR=/var/log
MAX_MEMORY=256M
OPEN_FILES=16384
FLUSH_LOGS=true
FLUSH_FS=true

###
# run the given command but print what we're about to run... 
runcmd() {

    echo $@
    $@
    result=$?
    return $result

}

get_controller() {
    cat conf/peregrine.conf | grep "controller=" |grep -Eo "[^=]+$" | grep -Eo "^[^:]+"
}

get_unique_hosts() {
    cat conf/peregrine.hosts | grep -Eo '^[^:]+' | sort | uniq
    get_controller
}

flush_logs() {

    for host in `get_unique_hosts`; do
        runcmd ssh root@$host "find $DIR/logs/ -name '*.log' -exec rm '{}' ';' " 
    done

}

start() {

    if [ "$FLUSH_LOGS" = "true" ]; then
        flush_logs
    fi

    for host in `cat conf/peregrine.hosts`; do
        hostname=$(echo $host|grep -Eo '^[^:]+')
        port=$(echo $host|grep -Eo '[^:]+$')

        basedir="/tmp/peregrine-fs"

        if [ "$port" = "11112" ] || [ "$port" = "11113" ]; then
            basedir="/d0/peregrine-fs"
        fi

        if [ "$port" = "11114" ] || [ "$port" = "11115" ]; then
            basedir="/d1/peregrine-fs"
        fi

        if [ "$port" = "11116" ] || [ "$port" = "11117" ]; then
            basedir="/d2/peregrine-fs"
        fi

        if [ "$port" = "11118" ] || [ "$port" = "11119" ]; then
            basedir="/d3/peregrine-fs"
        fi

        if [ "$FLUSH_FS" = "true" ]; then
            runcmd ssh root@$hostname "rm -rf $basedir" 
        fi

        runcmd ssh root@$hostname "cd $DIR && ./bin/workerd --host=$host --basedir=$basedir" 

    done

}

stop() {

    for host in `get_unique_hosts`; do
        runcmd ssh root@$host "pgrep -f peregrine.worker.Main | xargs kill"
    done

}

prep() {

    for host in `get_unique_hosts`; do
        runcmd ssh root@$host "cd $DIR && hg pull -u && ant clean jar" 
    done

}

### 
# 
# Run a given job on the controller.
run() {

    controller=$(get_controller)

    ssh root@$controller "cd $DIR && ./bin/jexec $@"

}

command=$1
shift
args=$@

case $command in

    prep)
        prep
        ;;

    start)
        start
        ;;

    stop)
        stop
        ;;

    run)
        run $args
        ;;

    restart)
        stop
        start
        ;;

    *)
        echo "ERROR: unknown command: $command" 
        exit 1
        ;;

esac
