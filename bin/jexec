#!/bin/bash

### 
# 
# Java execution script which wraps the JVM so we can easily turn on profiling,
# change memory settings, and apply default values for memory, etc.

CLASSNAME=$1
shift

run() {

    echo $@ > /dev/stderr
    $@
    result=$?
    return $result

}

## set default variables.
: ${MAX_MEMORY:="128M"}
: ${MAX_DIRECT_MEMORY:="128M"}
: ${JAVA:="java"}
: ${SILENT:="false"}
: ${PROFILER_ENABLED:="false"}
: ${PROFILER_ENABLED_OSX:="false"}
: ${PROFILER_PATH:="/usr/local/jprofiler"}
: ${PROFILER_OPTS:="-agentlib:jprofilerti=port=8849 -Xint -Xbootclasspath/a:$PROFILER_PATH/bin/agent.jar"}
: ${JMX_PORT:=12112}
: ${AUTO_RESTART:="false"}
: ${JVM_ARGS:=""}
: ${JAVA_OPTS:="-Dclover.distributed.coverage=ON -Dclover.server=true"}

# TODO: would be nice to not have to use sed here.

# allows us to use bash completion to pick a .java file and then run it directly.
CLASSNAME=$(echo $CLASSNAME | sed 's/src\/test\///g' | sed 's/src\/java\///g' | sed  's/.java//g' | sed 's/\//./g' )

if [ "$PROFILER_ENABLED" = "true" ]; then

    # -agentlib:jprofilerti=port=8849  -Xbootclasspath/a:/Applications/jprofiler5/bin/agent.jar

    echo "Running with profiler..."

    export JAVA_OPTS="$JAVA_OPTS $PROFILER_OPTS"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$PROFILER_PATH/bin/linux-x64/"
    echo $LD_LIBRARY_PATH

fi

if [ "$PROFILER_ENABLED_OSX" = "true" ]; then

    export PROFILER_OPTS="-agentlib:jprofilerti=port=8849 -Xintn  -Xbootclasspath/a:/Applications/jprofiler5/bin/agent.jar"
    export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:/Applications/jprofiler5/bin/macos"

    echo "Running with OS X profiler..."

    export JAVA_OPTS="$JAVA_OPTS $PROFILER_OPTS"

fi

set -o noglob

export CLASSPATH=target/compile:lib/*:lib/optional/cassandra/*:lib/build/*

# NOTE: we include -XX:MaxDirectMemorySize and -DMaxDirectMemorySize here so
# that we can read the max direct memory as a java system property.

###
# Use the JVM ParallelGC and not CMS 
# 
JVM_ARGS="$JVM_ARGS -XX:+UseParallelGC"

# http://javarevisited.blogspot.com/2012/06/what-is-xxusecompressedoops-in-64-bit.html
#
# Enable use of 32 bit ordinary object pointers as almost ALL of our JVMs we use
# will be less than 32GB for a long time to come.

JVM_ARGS="$JVM_ARGS -XX:+UseCompressedOops"

      #-XX:MaxDirectMemorySize=$MAX_DIRECT_MEMORY \
      #-DMaxDirectMemorySize=$MAX_DIRECT_MEMORY \

#TODO: I think we can read this from the sun.nio.MaxDirectMemorySize system
#property.

while [ true ]; do

    run $JAVA \
      -Xms$MAX_MEMORY \
      -Xmx$MAX_MEMORY \
      $JVM_ARGS \
      $JAVA_OPTS \
      $CLASSNAME "$@"

    result=$?

    if [ "$AUTO_RESTART" != "true" ]; then
        break
    fi

done

exit $result
