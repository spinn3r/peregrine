---
title: Documentation
layout: base
---

%h2 Get started

%p We use <a href="http://peregrine_mapreduce.bitbucket.org/xref">JXR</a> and <a href="http://peregrine_mapreduce.bitbucket.org/javadoc/">Javadoc</a> to allow developers to easily understand our code.  Start by looking at the <a href="http://peregrine_mapreduce.bitbucket.org/xref/peregrine/app/benchmark/package-summary.html">Benchmark</a> or <a href="http://peregrine_mapreduce.bitbucket.org/xref/peregrine/app/pagerank/package-summary.html">Pagerank</a> examples.

%h2 Running the code

%p Peregrine has two main components.  The Worker node (which runs the filesystem, mapper, merger, and reducer tasks) and the controller which is used to scheduler your job across the cluster..

%p To startup the worker on localhost just run:

%p <code>export HOSTNAME=localhost && ./bin/workerd </code>

%p This will startup a new daemon on port 11112

%p You can then run your client code with an embedded controller against this new worker node.

%p To run a simple benchmark you could execute:

%p <code>./bin/jexec peregrine.app.benchmark.Main</code>

%p This will startup a new controller instance and execute the benchmark job.

%h2 Larger clusters

%p This would just run on localhost with one compute node.

%p To run on a larger node you will need to set a controller and edit peregrine.hosts with the servers you wish to use.

%p The same config and host files must be present on all hosts and the controller.  Your job code should be placed in a .jar and added to the classpath.
