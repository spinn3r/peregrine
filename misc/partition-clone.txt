title Partition clone

Client->+Controller: Add partition 0 Worker1
Controller->Controller: Verify Worker1 is sane, \n sending heartbeats, has\nenough disk space, etc.
Controller->-Client: Adding Worker0.  New serial number for config is X.
note right of Client: Client optionally waits for config serial number X\nwhich indicates her request has succeeded.
destroy Client
Controller->+Worker0: Suspend compactions
Worker0->Worker0: Worker0 suspends\ncompactions
Worker0->-Controller: Compactions suspended
note left of Controller: The 'Compactions suspended' message is \nrequired because a worker might be in the \nmiddle of a compaction when this is sent\nand we need to wait until it is completed.
Controller->Controller: Worker1 is now a replica for writes
Controller->Worker1: Push latest replica config
Controller->Worker0: Push latest replica config
Worker0->Controller: Worker1 now in write pipeline
Controller->Worker1: clone partition 0 from Worker0
Worker1->Worker1: suspend compactions
Worker1->Controller: started clone
note left of Controller: The started clone message\nis required so that the controller\ncan start to keep track of the\nclone progress. Worker0\nshould now be reporting\nprogress.
Worker1->+Worker0: readdir(/0)
Worker0->-Worker1: List of all files on /0
note right of Worker1: The list includes\nfile metadata (size)
Worker1->+Worker0: GET chunk files via HTTP
Worker0->-Worker1: Send binary chunk data
Worker1-->>Controller: Send periodic progress messages
note left of Controller: The controller now watches\nWorker1 as it will be sending\noff progress messages.  If\nthese fail the clone is aborted.
Worker1->Worker1: Flush memtable writes
note right of Worker1: Worker1 must flush its\nmemtables first so\nthat they can be\noverwritten with files\nfrom Worker0 which\nhave records that\nWorker1 has not\nyet received.
Worker1->Worker1: Discard recent\nminor compactions.
note right of Worker1: Files written in the\nprevious memtable\nflush are now\nremoved to make\nway for new files\nfrom Worker0.
Worker1->+Worker0: Flush memtable writes.
Worker0->-Worker1: Memtable flushed
Worker1->+Worker0: readdir(/0)
Worker0->-Worker1: List of all files on /0
note right of Worker1: At this point only new\nfiles will be written\nto disk and each file\n has a unique serial\nnumber so we can\njust copy newly added\nfiles or files of differing\nsizes. This is just data\nfrom recet minor\ncompactions.
Worker1->Controller: partition clone complete
Worker1->Worker1: enable compactions
note left of Worker0: Now that the partition clone\nis complete, both workers\ntrigger a compaction.
Controller->Worker0: Enable compactions
Controller->Controller: Update membership with\nWorker1 as a replica\nfor reads on partition 0
Controller->Worker1: Push latest replica config
Controller->Worker0: Push latest replica config
note right of Worker1: Any new read or\nwrite backendRequests\nwith old membership\nneed to be aborted.
